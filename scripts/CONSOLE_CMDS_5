# Console Commands for Step 5
# Do not use echo commands
# Do not update or edit files using console commands.
# Only edit the section of this document between CODE START and CODE END

### CODE START ###
# Run final version management tests
/run pytest tests/version_management/ --cov=scripts.version --cov-report=term-missing -v

# Create production database backup
/run python -c "from scripts.version import create_db_backup; import logging; logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s'); create_db_backup('instance/stipend.db')"

# Run database migrations
/run flask db upgrade

# Update release notes
/run python -c "from scripts.version import get_version; version = get_version(); open('RELEASE_NOTES.md', 'w').write(f'# Release {version}\n\n- Added version management system\n- Implemented database backup functionality\n- Improved production environment validation\n- Fixed version file validation tests')"

# Commit and push changes
/run git add .
/run git commit -m "Release v0.2.0 - Version management and backup system"
/run git push origin feature/version-management

# Merge to main branch
/run git checkout main
/run git merge feature/version-management
/run git push origin main

# Create version tag
/run git tag v0.2.0
/run git push origin v0.2.0

# Update documentation
/run python -c "from scripts.version import get_version; version = get_version(); with open('README.md', 'a') as f: f.write(f'\n\n## Version {version}\n- Added version management system\n- Implemented database backup functionality\n- Improved production environment validation\n- Fixed version file validation tests')"

# Generate coverage report
/run coverage html

# Verify deployment
/run python -c "from scripts.version import validate_production_environment; import os; os.environ.update({'DATABASE_URL': 'sqlite:///:memory:', 'SECRET_KEY': 'test_key', 'ADMIN_EMAIL': 'test@example.com'}); assert validate_production_environment(); print('Environment validation test passed')"

# Check logging configuration
/run python -c "import logging; from scripts.version import verify_logging_configuration; assert verify_logging_configuration(); print('Logging configuration verified')"

# Archive logs
/run python -c "import shutil; from datetime import datetime; shutil.move('version_management.log', f'logs/version_management_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log')"

# Verify deployment configuration
/run python -c "from scripts.version import validate_production_environment; import os; os.environ.update({'DATABASE_URL': 'sqlite:///:memory:', 'SECRET_KEY': 'test_key', 'ADMIN_EMAIL': 'test@example.com'}); assert validate_production_environment(); print('Environment validation test passed')"


### CODE END ###

# Print the current datetime to console
/run scripts/print_datetime.py
/run Write-Host "Code Cycle Complete"

# Final updates
/add scripts/REQUESTS
/add scripts/MANAGER
/code Final cleanup before reset. Remove requests from MANAGER that have been implemented or scheduled for implementation. write a new DEVLOG based on this cycle. Add any requests for actions you need performed by MANAGER to REQUESTS. Update TODO list if needed, removing items that have been comlpeted. Keep PROJECT, CONVENTIONS, DEVLOG and TODO as compact as possible, prune and remove what you can without losing important information. Do not explain or summarize, just output the edits.

# Reset and restart Code Cycle
/reset
/load scripts\STEP_1
