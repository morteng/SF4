### **Instructions**

VERY IMPORTANT: We need to create end to end tests for all admin use cases, from login to registering a new stipend in db, creating a user, unsing all other admin functionality.

No need to encrypt log archives, leave 'em plain text.

IMPORTANT NEW INFO! I have added a RENDER_API_KEY to .env file in project root folder. Using this you should be able to authenticate and programmatically control the deployment of the app to render.com.

**General Guidelines:**
1. **Folder and File Operations:** Use temporary scripts to create/move files or folders. Execute them with `/run your_script.py` in the relevant console command step.
2. **Python Execution:** Write Python scripts in proper folders and execute them with `/run your_script.py`. Never run Python code directly in console commands.
3. **Deployment:** Deploy only when:
   - All tests pass.
   - All TODO items are resolved.
   - Explicit CEO approval is received.
4. **Testing:** Perform minimal tests per cycle and maintain concise outputs. No debug data dumps or manual inputs.

---

### **Priorities**

1. **High Priority:**
   - Remove all references to `stipends.db`. Ensure variables like `admin`, `database name`, and other configurations are read from `.env`.  
     Refer to `.env.example` for structure:  
     `SQLALCHEMY_DATABASE_URI=sqlite:///instance/site.db`.
   - Implement a system for the production server (on [Render](https://render.com)) to pull the CEO-approved version of the site and go live.  
     Use CLI for Render control (login via GitHub).

---

### **Requests**
1. **File Maintenance:**
   - Overwrite files like `RELEASE_NOTES.md` and `VERSION_HISTORY.md` during updates to prevent indefinite growth.
   - Organize the `scripts` folder, moving files into appropriate subfolders.
   - Handle backups by:
     - Deleting older backups.
     - Ensuring `site.db` is backed up correctly.

2. **Documentation and Testing:**
   - Maintain comprehensive documentation. Update `README.md`, `DESIGN.md`, and other relevant files per cycle.
   - Ensure proper GitHub testing integration and handle all related configurations effectively.

---

### **Rules**
- Work on **one feature at a time**.
- **Verify all changes** before deployment.
- Keep **outputs concise** and avoid unnecessary logs or inputs.
- Ensure all configuration values (admin credentials, database name, etc.) are dynamically loaded from `.env`.

---
