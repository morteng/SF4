import json
from datetime import datetime

def load_meta_cycle():
    """Load and validate meta cycle data"""
    try:
        with open("meta_cycles/meta_cycle.json", "r") as f:
            data = json.load(f)
            
        # Validate required fields
        if not isinstance(data.get("cycles"), list):
            raise ValueError("Invalid cycles format")
            
        return data
    except Exception as e:
        print(f"Error loading meta_cycle.json: {str(e)}")
        return None

def select_next_cycle(data):
    """Select the next cycle to work on"""
    cycles = data.get("cycles", [])
    
    # Filter and sort cycles
    pending_cycles = [c for c in cycles if c.get("status") == "pending"]
    pending_cycles.sort(key=lambda c: c.get("priority", 0), reverse=True)
    
    return pending_cycles[0] if pending_cycles else None

def update_cycle_status(cycle_name, status):
    """Update a cycle's status in the meta cycle file"""
    try:
        with open("meta_cycles/meta_cycle.json", "r") as f:
            data = json.load(f)
            
        for cycle in data["cycles"]:
            if cycle["name"] == cycle_name:
                cycle["status"] = status
                cycle["last_modified"] = datetime.now().isoformat()
                break
                
        with open("meta_cycles/meta_cycle.json", "w") as f:
            json.dump(data, f, indent=2)
            
        return True
    except Exception as e:
        print(f"Error updating cycle status: {str(e)}")
        return False

def main():
    data = load_meta_cycle()
    if not data:
        return
        
    cycle = select_next_cycle(data)
    if cycle:
        print(f"Next cycle is: {cycle['name']} (Priority: {cycle['priority']})")
        print(f"Status: {cycle.get('status', 'pending')}")
        print(f"Target files: {', '.join(cycle.get('target_files', []))}")
        print(f"/load meta_cycles/{cycle['script']}")
        
        # Mark cycle as in_progress
        update_cycle_status(cycle["name"], "in_progress")
    else:
        print("All cycles are completed!")

if __name__ == "__main__":
    main()

# Usage:
# /load meta_cycle_manager.aiderscript
# Aider runs the Python snippet, which prints something like:
# /load meta_cycles/fix_bug_cycle.aiderscript
# That triggers the next script automatically.
