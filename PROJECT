# Project Specification: Stipend Discovery Website

## Introduction
This Flask-based web app empowers users to discover and filter stipends in real time. It uses HTMX for snappy updates (good riddance full-page reloads) and offers a mobile-first, responsive design. Secure admin and automated bots handle CRUD tasks and data workflows.

## Key Features
- **User Discovery**: HTMX-driven filtering with real-time updates.  
- **Admin Interface**: Authenticated CRUD for stipends, tags, organizations, users, and bot settings.  
- **Automated Bots**: \[TagBot, UpdateBot, ReviewBot\] for scraping, tagging, updating, and validating data.  Build the scaffolding, systems and empty bot processing for now.
- **Quality & Testing**: Automated tests on startup, with a target of 80%+ coverage.  
- **Security**: Basic auth, salted password hashes, and conservative scraping to dodge IP bans (no plain-text nonsense, sir).

## Technical Stack
- **Backend**: Flask + SQLite (dev) / PostgreSQL (prod) + Alembic for migrations.  
- **Frontend**: HTML templates, CSS (responsive), JS + HTMX (dynamic interactions).  
- **Testing**: `pytest` & `pytest-cov` (unit, integration, end-to-end tests).  
- **Bots**: TagBot, UpdateBot, ReviewBot, each with dedicated tasks.  
- **Environment**: `.env` config with separate dev, test, and prod settings.

## Database Schema
- **Stipends**: `id`, `name`, `summary`, `description`, `homepage_url`, `eligibility_criteria`, `application_deadline`, `open_for_applications`, timestamps.  
- **Organizations**: `id`, `name`, `description`, `homepage_url`, timestamps.  
- **Tags**: `id`, `name`, `category`.  
- **Users**: `id`, `username`, `password_hash`, `email`, `is_admin`, timestamps.  
- **Bots**: `id`, `name`, `description`, `status`, `last_run`, `error_log`.  
- **Notifications**: `id`, `message`, `type`, `read_status`, timestamps.  

Relationships: Many-to-Many between **Stipends ↔ Tags** and **Stipends ↔ Organizations**.

## System Components
1. **User-Facing**: Homepage, search with HTMX filtering, detailed stipend pages.  
2. **Admin Section**: Secure login, CRUD for all data models, bot management, notifications for flagged items.  
3. **Bots**: Schedules for auto-tagging, data updates, and suspicious-entry reviews.

## Testing Specification
- Use `pytest` + `pytest-cov` targeting 80%+ coverage.  
- Run unit, integration, and end-to-end tests.  
- Employ an in-memory DB with fixtures for isolation, because messing up production is so passé.

## Security & Environment
- Auth-check all admin routes and sanitize user inputs.  
- Store passwords as salted hashes (again, no plain-text nonsense, sir).  
- `.env` files for sensitive configs; environment-specific settings keep secrets safe.

## Collaboration Guidelines
- **Branching**: Feature branches for new work (e.g., `feature/new-bot`).  
- **Pull Requests**: Required reviews before merging.  
- **Commit Messages**: Small, frequent, and descriptive.

## Folder Structure

Project Root/
  app/
    models/, routes/, services/, forms/, templates/, static/
  tests/
    app/, bots/, conftest.py
  bots/
    tag_bot.py, update_bot.py, review_bot.py
  instance/
  migrations/
  .env.example, README.md, requirements.txt


---