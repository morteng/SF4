# Coding Conventions for Stipend Discovery Website

## General Principles

1. **Consistency**: Code should look as if it was written by a single person.
2. **Readability**: Optimize for human understanding.
3. **Modularity**: Divide the project into small, manageable, and reusable components.
4. **Testability**: Code should be easy to test with clear separation of concerns.
5. **Documentation**: All significant code should have appropriate comments or documentation.
6. **Test-Driven Development**: Follow TDD principles by writing tests before implementing functionality.
7. **Coverage Goals**: Maintain 80% or higher test coverage.

---

## Naming Conventions

### Files and Folders

- **File Names**:
  - Use `snake_case` for Python files (e.g., `user_routes.py`).
  - Use descriptive names related to functionality.
- **Folders**:
  - Organize by purpose (e.g., `models/`, `services/`, `routes/`).

### Variables and Functions

- **Variables**:
  - Use `snake_case` for variables and function names.
  - Example: `total_stipends`, `filter_stipends`.
- **Functions**:
  - Descriptive names that indicate purpose.
  - Example: `fetch_all_tags`, `validate_user_input`.

### Classes

- Use `PascalCase` for class names.
- Example: `User`, `StipendService`.

### Constants

- Use `UPPER_CASE` for constants.
- Example: `MAX_STIPENDS_PER_PAGE`.

---

## Code Style

### Imports

1. Group imports:
   - Standard library imports.
   - Third-party imports.
   - Local application imports.
2. Example:
   
   import os
   from flask import Flask
   from app.models import Stipend
   

### Line Length

- Limit lines to **79 characters**.
- For docstrings and comments, limit to **72 characters**.

### String Formatting

- Prefer f-strings:
  
  f"{user.name} applied for {stipend.name}"
  
- Avoid concatenation of strings with `+`.

### Indentation

- Use **4 spaces** per indentation level.

### Comments

- Use comments sparingly and only when the code is not self-explanatory.
- Write comments in complete sentences.

---

## Best Practices

### Functions and Classes

- **Single Responsibility**: Each function or class should perform a single task.
- **Short Functions**: Functions should not exceed 30 lines.
- **Error Handling**: Use `try-except` blocks and log exceptions.

### Commits

- Commit often, with descriptive messages.
- Example: `Fix bug in stipend validation logic`.

### Tests

- Write tests for all new functionality.
- Include unit, integration, and end-to-end tests where applicable.
- Ensure 80% or higher test coverage across the project.

### Pull Requests

- Small, focused changes.
- Include descriptions of what the PR achieves.

---

## Documentation Standards

1. **Docstrings**:
   - Use for all public classes and functions.
   - Example:
     
     def fetch_stipends():
         """
         Fetch all stipends currently available.

         Returns:
             List[Stipend]: List of active stipends.
         """
     

2. **Inline Comments**:
   - Use for clarifying non-obvious logic.

3. **README and CONVENTIONS.md**:
   - Keep updated with any major changes to the project or standards.

---

## Version Control and Branching Strategy

- **Branching Conventions**:
    - `feature/`: For new features.
    - `bugfix/`: For bug fixes.
    - `hotfix/`: For critical production fixes.
    - `release/`: For release preparation.
    - `chore/`: For maintenance tasks.
- **Branch Names**:
    - Branch names should be descriptive and follow the convention: `<branch_type>/<short_description>`.
    - Example: `feature/add-user-authentication`, `bugfix/fix-login-error`.

## Versioning Policy

- **Semantic Versioning**:
    - Use MAJOR.MINOR.PATCH format.
    - **MAJOR** version for incompatible API changes.
    - **MINOR** version for backward-compatible functionality.
    - **PATCH** version for backward-compatible bug fixes.
- **Pre-release Versions**:
    - Use `-alpha`, `-beta` suffixes for pre-release versions (e.g., `1.0.0-alpha.1`).
- **Build Metadata**:
    - Use `+build` suffix for build metadata (e.g., `1.0.0+build.123`).
- **Version Validation**:
    - Version format must be validated before commit.

---

## Example Code Structure

### Directory Layout


Project Root/
  app/
    models/
    routes/
    services/
    templates/
    static/
  tests/
  bots/
  migrations/
  .env.example
  requirements.txt
  README.md
  CONVENTIONS.md


### Sample Route


from flask import Blueprint, jsonify
from app.models import Stipend

admin_routes = Blueprint('admin', __name__)

@admin_routes.route('/stipends', methods=['GET'])
def get_stipends():
    """
    Fetch all stipends.

    Returns:
        JSON: List of stipends.
    """
    stipends = Stipend.query.all()
    return jsonify([stipend.to_dict() for stipend in stipends])


### Sample Test


def test_get_stipends(client):
    """Test that all stipends are fetched successfully."""
    response = client.get('/admin/stipends')
    assert response.status_code == 200
    assert isinstance(response.json, list)


---

This document provides a comprehensive guide to maintain coding standards and consistency across the Stipend Discovery Website project.
