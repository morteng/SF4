# Todo
1. Add comprehensive test coverage for all edge cases, especially date/time validation
2. Review all constants in `app/constants.py` to ensure consistency and completeness

### **Recent Changes**
1. **Fixed Test File Conflicts**:
   - Renamed `tests/test_forms.py` to `tests/test_main_forms.py` to avoid import conflicts.
   - Ensured all test files have unique names to prevent module collisions.

2. **Updated Constants Usage**:
   - Standardized usage of `INVALID_LEAP_YEAR_DATE` across all files.
   - Removed references to non-existent `INVALID_LEAP_YEAR` constant.
   - Fixed duplicate `UPDATE_ERROR` definition in `app/constants.py`.
   - Added missing `NOT_FOUND` and `FORM_VALIDATION_ERROR` constants.

3. **Improved Test Organization**:
   - Moved form-related tests to `tests/app/forms/test_forms.py` for better structure.
   - Added comprehensive date/time validation tests in `tests/test_datetime_validation.py`.
   - Consolidated overlapping tests into single files to avoid redundancy.

4. **Fixed Circular Imports**:
   - Refactored imports in `app/__init__.py` to use lazy imports.
   - Moved shared utilities to `app/common/utils.py` to reduce dependencies.

5. **Improved Rate Limiter Configuration**:
   - Added Redis as the storage backend for Flask-Limiter in production.

### **Key Takeaways for Next Coding Session**
1. **Test File Naming**:
   - Ensure all test files have unique names to avoid import conflicts.
   - Use descriptive names that reflect the module being tested.

2. **Constants Management**:
   - Always use constants from `app/constants.py` instead of hardcoded strings.
   - Verify that all constants referenced in the code exist in `app/constants.py`.
   - Avoid duplicate constant definitions in `Enum` classes.

3. **Test Organization**:
   - Keep tests organized by module/package structure for better maintainability.
   - Use `tests/app/` for application-specific tests and `tests/` for general tests.
   - Consolidate overlapping tests to avoid redundancy.

4. **Error Handling**:
   - Add proper error handling for missing or invalid constants.
   - Log errors with context for easier debugging.

5. **Code Quality**:
   - Regularly clear `__pycache__` directories to avoid stale compiled files.
   - Use consistent naming conventions across the codebase.

6. **Validation Logic**:
   - Confirm data types before applying validation.
   - Centralize error messages, stay consistent.

7. **Testing**:
   - More edge-case coverage.
   - Keep a good variety of unit, integration, and E2E tests.

8. **Error Handling & Logging**:
   - Don't just "print" stuff—log it with context.
   - Make error messages user-friendly (or at least developer-friendly).

9. **Code Organization**:
   - Keep modules small and logical.
   - Use base classes and utilities to avoid duplication.

### **Lessons Learned**
1. **Duplicate Constants**:
   - Duplicate constant definitions can cause `TypeError` in `Enum` classes.
   - Ensure each constant is defined only once in `app/constants.py`.

2. **Testing**:
   - Comprehensive testing of date/time validation is essential—particularly with user-submitted data.
   - Use mocking tools like `freezegun` for predictable time-based tests.

3. **Code Organization**:
   - Modular and reusable validation logic improves maintainability.
   - Using constants instead of hardcoded strings reduces the chance of errors.

4. **Property Implementation**:
   - Always define properties with `@property` before using `@<property>.setter`.
   - Validate property values in setters to maintain data integrity.

5. **Error Handling**:
   - Proper error handling in property setters is crucial for maintaining data integrity.
   - Logging errors with context makes debugging easier.

6. **Rate Limiting**:
   - Proper configuration and validation of rate limiters prevent runtime errors.
   - Rate limit values should be validated in setters to ensure they are valid strings.

7. **Circular Imports**:
   - Circular imports can cause initialization errors and should be avoided.
   - Use lazy imports or refactor shared logic into utility modules to reduce import complexity.

### **Recent Changes**
1. **Fixed Duplicate Constants**:
   - Removed duplicate constants (`CREATE_SUCCESS`, `UPDATE_SUCCESS`, `DELETE_SUCCESS`, `MISSING_FIELD_ERROR`) from `FlashMessages` class in `app/constants.py`.

2. **Refactored Validation Logic**:
   - Moved reusable validation logic (e.g., `validate_application_deadline`) to `app/common/utils.py`.

3. **Improved Tests**:
   - Added edge case tests in `tests/test_base_crud_controller.py` for invalid form submissions and missing fields.

4. **Updated `requirements.txt`**:
   - Added `beautifulsoup4` for HTML parsing in tests.

5. **Fixed Property Implementation**:
   - Consolidated the `create_limit` property in `app/services/base_service.py` to avoid conflicts and ensure proper validation.

6. **Rate Limiter Configuration**:
   - Added validation for rate limit values in `app/services/base_service.py` to ensure they are valid strings.

### **Recent Changes**
1. **Added Missing Constants**:
   - Added `MISSING_FIELD_ERROR`, `USERNAME_REQUIRED`, `USERNAME_LENGTH`, `USERNAME_FORMAT`, and `EMAIL_REQUIRED` to `app/constants.py`.

2. **Refactored Validation Logic**:
   - Moved reusable validation logic (e.g., `validate_application_deadline`) to `app/common/utils.py`.

3. **Improved Tests**:
   - Added edge case tests in `tests/test_base_crud_controller.py` for invalid form submissions and missing fields.

4. **Updated `requirements.txt`**:
   - Added `beautifulsoup4` for HTML parsing in tests.

5. **Fixed Property Implementation**:
   - Consolidated the `create_limit` property in `app/services/base_service.py` to avoid conflicts and ensure proper validation.

6. **Rate Limiter Configuration**:
   - Added validation for rate limit values in `app/services/base_service.py` to ensure they are valid strings.


